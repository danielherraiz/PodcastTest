import xml.etree.ElementTree as ET
from datetime import datetime
from xml.dom import minidom

# === Namespaces ===
NSMAP = {
    "media": "http://search.yahoo.com/mrss/",
    "atom": "http://www.w3.org/2005/Atom",
    "dc": "http://purl.org/dc/elements/1.1/"
}

# Register namespaces
for prefix, uri in NSMAP.items():
    ET.register_namespace(prefix, uri)

# === Build RSS structure ===
rss = ET.Element("rss", {
    "version": "2.0",
    "xmlns:content": "http://purl.org/rss/1.0/modules/content/",
    "xmlns:media": "http://search.yahoo.com/mrss/",
    "xmlns:itunes": "http://www.itunes.com/dtds/podcast-1.0.dtd",
})
channel = ET.SubElement(rss, "channel")

ET.SubElement(channel, "title").text = f"{showInfo['title']} - Spotify"
ET.SubElement(channel, "description").text = showInfo['description']
ET.SubElement(channel, "pubDate").text = showInfo.get('pubDate', '')
ET.SubElement(channel, "link").text = showInfo['link']

# Atom self-link (you can customize the feed URL below)
ET.SubElement(channel, "{http://www.w3.org/2005/Atom}link", {
    "href": "https://github.com/danielherraiz/PodcastTest/blob/main/rsstest.rss",  # Replace this with your actual feed URL
    "rel": "self",
    "type": "application/rss+xml"
})

ET.SubElement(channel, "generator").text = "Python RSS Generator"

# Channel image
image = ET.SubElement(channel, "image")
ET.SubElement(image, "link").text = showInfo['image']['link']
ET.SubElement(image, "url").text = showInfo['image']['url']
ET.SubElement(image, "title").text = showInfo['image']['title']

# Episodes (items)
for ep in episodes:
    item = ET.SubElement(channel, "item")
    ET.SubElement(item, "title").text = ep['title']
    ET.SubElement(item, "link").text = ep['link']

    # Description with HTML inside CDATA
    description = ET.SubElement(item, "description")
    cdata = (
        f'<![CDATA[ <img src="{ep["imageUrl"]}" width="300" height="300" /><br><br>'
        f'{ep["title"]}<br/><br/><span style="font-size:12px; color: gray;">'
        f'(Feed generated with Python)</span> ]]>'
    )
    description.text = cdata

    ET.SubElement(item, "pubDate").text = ep.get("pubDate", showInfo.get("pubDate", ""))
    ET.SubElement(item, "media:content", {
        "url": ep["imageUrl"],
        "medium": "image",
        "width": "300",
        "height": "300"
    })
    ET.SubElement(item, "guid", isPermaLink="false").text = ep["episodeId"]

# === Output nicely formatted XML string ===
raw_xml = ET.tostring(rss, encoding="utf-8")
parsed = minidom.parseString(raw_xml)
pretty_xml = parsed.toprettyxml(indent="  ")

# === Save to file (optional) ===
with open("output_feed.xml", "w", encoding="utf-8") as f:
    f.write(pretty_xml)

# Or just print
# print(pretty_xml)
